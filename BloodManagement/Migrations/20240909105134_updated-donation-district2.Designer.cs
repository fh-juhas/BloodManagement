// <auto-generated />
using System;
using BloodManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240909105134_updated-donation-district2")]
    partial class updateddonationdistrict2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodManagement.Models.Domain.BloodGroup", b =>
                {
                    b.Property<string>("BloodGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DonationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodGroupId");

                    b.HasIndex("DonationId");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.District", b =>
                {
                    b.Property<string>("districtId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("districtName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("districtId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.Donation", b =>
                {
                    b.Property<string>("DonationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DonationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DonationId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("DonorId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.DonorInfo", b =>
                {
                    b.Property<string>("DonorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DonationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliceStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DonorId");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DonationId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.BloodGroup", b =>
                {
                    b.HasOne("BloodManagement.Models.Domain.Donation", null)
                        .WithMany("BloodGroups")
                        .HasForeignKey("DonationId");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.Donation", b =>
                {
                    b.HasOne("BloodManagement.Models.Domain.BloodGroup", "BloodGroup")
                        .WithMany("Donations")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodManagement.Models.Domain.DonorInfo", "DonorInfo")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("DonorInfo");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.DonorInfo", b =>
                {
                    b.HasOne("BloodManagement.Models.Domain.BloodGroup", "BloodGroup")
                        .WithMany("Donors")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodManagement.Models.Domain.District", "District")
                        .WithMany("Donors")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodManagement.Models.Domain.Donation", null)
                        .WithMany("Donors")
                        .HasForeignKey("DonationId");

                    b.Navigation("BloodGroup");

                    b.Navigation("District");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.BloodGroup", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Donors");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.District", b =>
                {
                    b.Navigation("Donors");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.Donation", b =>
                {
                    b.Navigation("BloodGroups");

                    b.Navigation("Donors");
                });

            modelBuilder.Entity("BloodManagement.Models.Domain.DonorInfo", b =>
                {
                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
